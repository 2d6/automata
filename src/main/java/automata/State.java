package automata;

/**
 * A state in a deterministic fininte automaton
 * @author 2d6
 */
public class State {
	private final boolean isAccepting;
	private final String identifier;
	
	/**
	 * Creates a new State
	 * @param identifier Identifier of the new state
	 * @param isAccepting Acceptance status of the state. True if the state is accepting.
	 */
	public State(String identifier, boolean isAccepting) {
		this.isAccepting = isAccepting;
		this.identifier = identifier;
	}
	
	public boolean isAccepting() {
		return this.isAccepting;
	}
	
	public String getIdentifier() {
		return this.identifier;
	}

	/*
	 * Hashcode method generated by Eclipse
	 * (non-Javadoc)
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((identifier == null) ? 0 : identifier.hashCode());
		result = prime * result + (isAccepting ? 1231 : 1237);
		return result;
	}

	/*
	 * Equals method generated by eclipse
	 * (non-Javadoc)
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		State other = (State) obj;
		if (identifier == null) {
			if (other.identifier != null)
				return false;
		} else if (!identifier.equals(other.identifier))
			return false;
		if (isAccepting != other.isAccepting)
			return false;
		return true;
	}
	
	
}
