package automata;

/**
 * A transition in a @see{TransitionFunction}. Connects an initial state to a
 * target state with the triggering symbol as a condition.
 * @author 2d6
 *
 */
public class Transition {

	private final State initialState;
	private final State targetState;
	private final char symbol;

	public State getInitialState() {
		return initialState;
	}

	public State getTargetState() {
		return targetState;
	}

	public char getSymbol() {
		return symbol;
	}

	/**
	 * Creates a Transition
	 * @param initialState The initial state of the transition
	 * @param targetState The target state of the transition
	 * @param symbol The triggering symbol of the transition
	 */
	public Transition(State initialState, State targetState, char symbol) {
		if (initialState == null) {
			throw new NullPointerException("Initial state may not be null");
		}
		else if (targetState == null) {
			throw new NullPointerException("Target state may not be null");
		}
		else if (Character.isWhitespace(symbol) || symbol == '\0') {
			throw new IllegalArgumentException("Symbol may not be whitespace character or empty ('\0')");
		}
		
		this.initialState = initialState;
		this.targetState = targetState;
		this.symbol = symbol;
	}

	/*
	 * HashCode method generated by Eclipse
	 * (non-Javadoc)
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((initialState == null) ? 0 : initialState.hashCode());
		result = prime * result + symbol;
		result = prime * result
				+ ((targetState == null) ? 0 : targetState.hashCode());
		return result;
	}

	/*
	 * Equals method generated by Eclipse
	 * (non-Javadoc)
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Transition other = (Transition) obj;
		if (initialState == null) {
			if (other.initialState != null)
				return false;
		} else if (!initialState.equals(other.initialState))
			return false;
		if (symbol != other.symbol)
			return false;
		if (targetState == null) {
			if (other.targetState != null)
				return false;
		} else if (!targetState.equals(other.targetState))
			return false;
		return true;
	}
	
	

}
